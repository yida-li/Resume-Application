{"ast":null,"code":"var _jsxFileName = \"/home/king/Desktop/ContactKeeperV2/client/src/components/layout/Navbar.js\";\nimport React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AuthContext from '../../context/auth/authContext';\nimport ContactContext from '../../context/contact/contactContext';\n\nconst Navbar = ({\n  title,\n  icon\n}) => {\n  const authContext = useContext(AuthContext);\n  const contactContext = useContext(ContactContext);\n  const {\n    isAuthenticated,\n    logout,\n    user,\n    loadUser\n  } = authContext;\n  const {\n    clearContacts\n  } = contactContext;\n  useEffect(() => {\n    loadUser(); //eslint-disable-next-line\n  }, []);\n\n  const onLogout = () => {\n    logout(); // When we logout and then try to login we see the previous user\n    //contacts for a sec. To avoid this we clear the contacts after\n    // logging out\n\n    clearContacts();\n  };\n\n  const authLinks = React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Hello \", user && user.name), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    onClick: onLogout,\n    href: \"#!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fas fa-sign-out-alt\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"hide-sm\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Logout\"))));\n  const guestLinks = React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Register\")), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(Link, {\n    to: \"/login\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Login\")));\n  return React.createElement(\"div\", {\n    className: \"navbar bg-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: icon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), \" \", title), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, isAuthenticated ? authLinks : guestLinks));\n};\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  icon: PropTypes.string\n};\nNavbar.defaultProps = {\n  title: 'Contact Keeper',\n  icon: \"fas fa-id-card-alt\"\n};\nexport default Navbar;","map":{"version":3,"sources":["/home/king/Desktop/ContactKeeperV2/client/src/components/layout/Navbar.js"],"names":["React","Fragment","useContext","useEffect","PropTypes","Link","AuthContext","ContactContext","Navbar","title","icon","authContext","contactContext","isAuthenticated","logout","user","loadUser","clearContacts","onLogout","authLinks","name","guestLinks","propTypes","string","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,cAAP,MAA2B,sCAA3B;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqB;AAChC,QAAMC,WAAW,GAAGT,UAAU,CAACI,WAAD,CAA9B;AACA,QAAMM,cAAc,GAAGV,UAAU,CAACK,cAAD,CAAjC;AACA,QAAM;AAAEM,IAAAA,eAAF;AAAmBC,IAAAA,MAAnB;AAA2BC,IAAAA,IAA3B;AAAiCC,IAAAA;AAAjC,MAA8CL,WAApD;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAoBL,cAA1B;AAEAT,EAAAA,SAAS,CAAC,MAAM;AACZa,IAAAA,QAAQ,GADI,CAEZ;AACH,GAHQ,EAGN,EAHM,CAAT;;AAIA,QAAME,QAAQ,GAAG,MAAK;AAClBJ,IAAAA,MAAM,GADY,CAElB;AACA;AACA;;AACAG,IAAAA,aAAa;AAChB,GAND;;AAQA,QAAME,SAAS,GACX,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYJ,IAAI,IAAIA,IAAI,CAACK,IAAzB,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,OAAO,EAAIF,QAAd;AAAwB,IAAA,IAAI,EAAE,IAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAE,qBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAC4C;AAAM,IAAA,SAAS,EAAE,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAD5C,CADJ,CAFJ,CADJ;AAWA,QAAMG,UAAU,GACZ,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAJ,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAI,oBAAC,IAAD;AAAM,IAAA,EAAE,EAAE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAJ,CAFJ,CADJ;AAOA,SACI;AAAK,IAAA,SAAS,EAAE,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAEX,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,OAC4BD,KAD5B,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACMI,eAAe,GAAGM,SAAH,GAAeE,UADpC,CAJJ,CADJ;AAUH,CA9CD;;AAgDAb,MAAM,CAACc,SAAP,GAAmB;AACfb,EAAAA,KAAK,EAAEL,SAAS,CAACmB,MAAV,CAAiBC,UADT;AAEfd,EAAAA,IAAI,EAAEN,SAAS,CAACmB;AAFD,CAAnB;AAKAf,MAAM,CAACiB,YAAP,GAAsB;AAClBhB,EAAAA,KAAK,EAAE,gBADW;AAElBC,EAAAA,IAAI,EAAE;AAFY,CAAtB;AAKA,eAAeF,MAAf","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react'\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'\nimport AuthContext from '../../context/auth/authContext'\nimport ContactContext from '../../context/contact/contactContext'\n\nconst Navbar = ({ title, icon }) => {\n    const authContext = useContext(AuthContext)\n    const contactContext = useContext(ContactContext)\n    const { isAuthenticated, logout, user, loadUser } = authContext\n    const { clearContacts } = contactContext\n\n    useEffect(() => {\n        loadUser()\n        //eslint-disable-next-line\n    }, [])\n    const onLogout = () =>{\n        logout()   \n        // When we logout and then try to login we see the previous user\n        //contacts for a sec. To avoid this we clear the contacts after\n        // logging out\n        clearContacts()\n    } \n    \n    const authLinks = (\n        <Fragment>\n            <li>Hello { user && user.name }</li>\n            <li>\n                <a onClick = {onLogout} href= \"#!\">\n                    <i className= \"fas fa-sign-out-alt\"></i><span className= \"hide-sm\">Logout</span>\n                </a>\n            </li>\n        </Fragment>\n    )\n\n    const guestLinks = (\n        <Fragment>\n            <li><Link to =\"/register\">Register</Link></li>\n            <li><Link to =\"/login\">Login</Link></li>\n        </Fragment>\n    )\n\n    return (\n        <div className= \"navbar bg-primary\">\n            <h1>\n                <i className={icon} /> {title}               \n            </h1>\n            <ul>\n                { isAuthenticated ? authLinks : guestLinks }\n            </ul>\n        </div>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    icon: PropTypes.string,\n}\n\nNavbar.defaultProps = {\n    title: 'Contact Keeper',\n    icon: \"fas fa-id-card-alt\"\n}\n\nexport default Navbar\n"]},"metadata":{},"sourceType":"module"}