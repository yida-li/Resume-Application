{"ast":null,"code":"var _jsxFileName = \"/home/king/Desktop/testingGround/client/src/context/auth/AuthState.js\";\nimport React, { useReducer } from 'react';\nimport uuid from 'uuid';\nimport axios from 'axios';\nimport authReducer from './authReducer';\nimport authContext from './authContext';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../Types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: false,\n    loading: true,\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Load user : Check which user is logged in\n\n  const loadUser = async () => {\n    // This function is fleshed out in utils/setAuthToken.js\n    // We are storing the token from JWT into the global headers\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; // Register user \n\n\n  const register = async formData => {\n    const config = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Login user\n\n\n  const login = async formData => {\n    const config = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    try {\n      const res = await axios.post('/api/auth', formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data\n      });\n    }\n  }; //Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear errors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  return React.createElement(authContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      error: state.error,\n      user: state.user,\n      register,\n      loadUser,\n      login,\n      logout,\n      clearErrors\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/home/king/Desktop/testingGround/client/src/context/auth/AuthState.js"],"names":["React","useReducer","uuid","axios","authReducer","authContext","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","loadUser","res","get","type","payload","data","err","register","formData","config","post","response","msg","login","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React ,{ useReducer } from 'react'\nimport uuid from 'uuid'\nimport axios from 'axios'\nimport authReducer from './authReducer'\nimport authContext from './authContext'\nimport setAuthToken from '../../utils/setAuthToken'\n\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    USER_LOADED,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    CLEAR_ERRORS\n} from '../Types'\n\nconst AuthState = props => {\n    const initialState= {\n        token: localStorage.getItem('token'),\n        isAuthenticated: false,\n        loading: true,\n        user: null,\n        error: null\n    }\n\n    const [state, dispatch] = useReducer(authReducer, initialState)\n\n    // Load user : Check which user is logged in\n    const loadUser = async () => {\n        // This function is fleshed out in utils/setAuthToken.js\n        // We are storing the token from JWT into the global headers\n\n        if (localStorage.token) {\n            setAuthToken(localStorage.token)\n        }\n\n        try {\n            const res = await axios.get('/api/auth')\n            dispatch({ type: USER_LOADED, payload: res.data})\n        } catch (err) {\n            dispatch({ type: AUTH_ERROR })\n        }\n    }\n\n    // Register user \n    const register = async formData => {\n        const config = {\n            \"Content-Type\": \"application/json\"\n        }\n\n        try {\n            const res = await axios.post('/api/users', formData, config)\n\n            dispatch({\n                type: REGISTER_SUCCESS,\n                payload: res.data\n            }) \n\n            loadUser()\n\n        } catch (err) {\n            dispatch({\n                type: REGISTER_FAIL,\n                payload: err.response.data.msg\n            })\n        }\n        \n    }\n    // Login user\n    const login = async formData => {\n        const config = {\n            \"Content-Type\": \"application/json\"\n        }\n\n        try {\n            const res = await axios.post('/api/auth', formData, config)\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            }) \n\n            loadUser()\n                  \n        } catch (err) {\n            dispatch({\n                type: LOGIN_FAIL,\n                payload: err.response.data\n            })\n        }\n        \n    }\n    //Logout\n    const logout = () => dispatch({ type: LOGOUT })\n    // Clear errors\n    const clearErrors = () => dispatch({ type: CLEAR_ERRORS})\n    return (\n        <authContext.Provider value = {{\n            token: state.token,\n            isAuthenticated: state.isAuthenticated,\n            loading: state.loading,\n            error: state.error,\n            user: state.user,\n            register,\n            loadUser,\n            login,\n            logout,\n            clearErrors\n        }}>\n            { props.children }\n        </authContext.Provider>\n    )\n}\n\nexport default AuthState"]},"metadata":{},"sourceType":"module"}