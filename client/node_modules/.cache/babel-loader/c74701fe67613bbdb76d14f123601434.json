{"ast":null,"code":"var _jsxFileName = \"/home/king/Desktop/testingGround/client/src/context/auth/AuthState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport authReducer from './authReducer';\nimport authContext from './authContext';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, CLEAR_ERRORS } from '../Types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: false,\n    loading: true,\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Load user : Check which user is logged in\n\n  const loadUser = async () => {\n    // This function is fleshed out in utils/setAuthToken.js\n    // We are storing the token from JWT into the global headers\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; // Register user\n\n\n  const register = async formData => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; // Login user\n\n\n  const login = async formData => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/auth', formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data\n      });\n    }\n  }; //Logout\n\n\n  const logout = () => dispatch({\n    type: LOGOUT\n  }); // Clear errors\n\n\n  const clearErrors = () => dispatch({\n    type: CLEAR_ERRORS\n  });\n\n  return React.createElement(authContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthenticated: state.isAuthenticated,\n      loading: state.loading,\n      error: state.error,\n      user: state.user,\n      register,\n      loadUser,\n      login,\n      logout,\n      clearErrors\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default AuthState;","map":{"version":3,"sources":["/home/king/Desktop/testingGround/client/src/context/auth/AuthState.js"],"names":["React","useReducer","axios","authReducer","authContext","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthenticated","loading","user","error","state","dispatch","loadUser","res","get","type","payload","data","err","register","formData","config","post","response","msg","login","logout","clearErrors","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\n\nimport axios from 'axios';\nimport authReducer from './authReducer';\nimport authContext from './authContext';\nimport setAuthToken from '../../utils/setAuthToken';\n\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  CLEAR_ERRORS\n} from '../Types';\n\nconst AuthState = props => {\n  const initialState = {\n    token: localStorage.getItem('token'),\n    isAuthenticated: false,\n    loading: true,\n    user: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Load user : Check which user is logged in\n  const loadUser = async () => {\n    // This function is fleshed out in utils/setAuthToken.js\n    // We are storing the token from JWT into the global headers\n\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({ type: USER_LOADED, payload: res.data });\n    } catch (err) {\n      dispatch({ type: AUTH_ERROR });\n    }\n  };\n\n  // Register user\n  const register = async formData => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  };\n  // Login user\n  const login = async formData => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/auth', formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n\n      loadUser();\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data\n      });\n    }\n  };\n  //Logout\n  const logout = () => dispatch({ type: LOGOUT });\n  // Clear errors\n  const clearErrors = () => dispatch({ type: CLEAR_ERRORS });\n  return (\n    <authContext.Provider\n      value={{\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n        loading: state.loading,\n        error: state.error,\n        user: state.user,\n        register,\n        loadUser,\n        login,\n        logout,\n        clearErrors\n      }}\n    >\n      {props.children}\n    </authContext.Provider>\n  );\n};\n\nexport default AuthState;\n"]},"metadata":{},"sourceType":"module"}