{"ast":null,"code":"var _jsxFileName = \"/home/king/Desktop/testingGround/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport contactReducer from './contactReducer';\nimport contactContext from './contactContext';\nimport { GET_CONTACTS, CLEAR_CONTACTS, ADD_CONTACT, DELETE_CONTACT, UPDATE_CONTACT, SET_CURRENT, CLEAR_CURRENT, CLEAR_FILTER, FILTER_CONTACTS, CONTACT_ERROR } from '../Types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add a contact\n\n\n  const addContact = async contact => {\n    const config = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete a contact\n\n\n  const deleteContact = async id => {\n    try {\n      const res = await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update contact\n\n\n  const updateContact = async contact => {\n    const config = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Set current contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear current contact\n\n\n  const clearCurrent = contact => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  };\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      error: state.error,\n      addContact,\n      deleteContact,\n      current: state.current,\n      filtered: state.filtered,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/home/king/Desktop/testingGround/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","contactReducer","contactContext","GET_CONTACTS","CLEAR_CONTACTS","ADD_CONTACT","DELETE_CONTACT","UPDATE_CONTACT","SET_CURRENT","CLEAR_CURRENT","CLEAR_FILTER","FILTER_CONTACTS","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","post","deleteContact","id","delete","updateContact","put","_id","setCurrent","clearCurrent","filterContacts","text","clearContacts","clearFilter","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SACIC,YADJ,EAEIC,cAFJ,EAGIC,WAHJ,EAIIC,cAJJ,EAKIC,cALJ,EAMIC,WANJ,EAOIC,aAPJ,EAQIC,YARJ,EASIC,eATJ,EAUIC,aAVJ,QAWO,UAXP;;AAaA,MAAMC,YAAY,GAAGC,KAAK,IAAI;AAC1B,QAAMC,YAAY,GAAE;AAChBC,IAAAA,QAAQ,EAAE,IADM;AAEhBC,IAAAA,OAAO,EAAE,IAFO;AAGhBC,IAAAA,QAAQ,EAAE,IAHM;AAIhBC,IAAAA,KAAK,EAAE;AAJS,GAApB;AAOA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBtB,UAAU,CAACE,cAAD,EAAiBc,YAAjB,CAApC,CAR0B,CAU1B;;AACA,QAAMO,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,GAAG,GAAG,MAAMvB,KAAK,CAACwB,GAAN,CAAU,eAAV,CAAlB;AACAH,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAEtB,YAAP;AAAqBuB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAAlC,OAAD,CAAR;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEb,aAAR;AAAwBc,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAA9C,OAAD,CAAR;AACH;AACJ,GAPD,CAX0B,CAmB1B;;;AACA,QAAMC,UAAU,GAAG,MAAMC,OAAN,IAAiB;AAChC,UAAMC,MAAM,GAAG;AACX,sBAAiB;AADN,KAAf;;AAIA,QAAI;AACA,YAAMV,GAAG,GAAG,MAAMvB,KAAK,CAACkC,IAAN,CAAW,eAAX,EAA4BF,OAA5B,EAAqCC,MAArC,CAAlB;AACAZ,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAEpB,WAAP;AAAoBqB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAAjC,OAAD,CAAR;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEb,aAAR;AAAwBc,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAA9C,OAAD,CAAR;AACH;AAEJ,GAZD,CApB0B,CAiC1B;;;AACA,QAAMK,aAAa,GAAG,MAAOC,EAAP,IAAc;AAChC,QAAI;AACA,YAAMb,GAAG,GAAG,MAAMvB,KAAK,CAACqC,MAAN,CAAc,iBAAgBD,EAAG,EAAjC,CAAlB;AACAf,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAEnB,cAAP;AAAuBoB,QAAAA,OAAO,EAAEU;AAAhC,OAAD,CAAR;AACH,KAHD,CAGE,OAAOR,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEb,aAAR;AAAwBc,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAA9C,OAAD,CAAR;AACH;AACJ,GAPD,CAlC0B,CA0C1B;;;AACA,QAAMQ,aAAa,GAAG,MAAON,OAAP,IAAmB;AACrC,UAAMC,MAAM,GAAG;AACX,sBAAiB;AADN,KAAf;;AAIA,QAAI;AACA,YAAMV,GAAG,GAAG,MAAMvB,KAAK,CAACuC,GAAN,CAAW,iBAAgBP,OAAO,CAACQ,GAAI,EAAvC,EAA0CR,OAA1C,EAAmDC,MAAnD,CAAlB;AACAZ,MAAAA,QAAQ,CAAC;AAACI,QAAAA,IAAI,EAAElB,cAAP;AAAuBmB,QAAAA,OAAO,EAAEH,GAAG,CAACI;AAApC,OAAD,CAAR;AACH,KAHD,CAGE,OAAOC,GAAP,EAAY;AACVP,MAAAA,QAAQ,CAAC;AAAEI,QAAAA,IAAI,EAAEb,aAAR;AAAwBc,QAAAA,OAAO,EAAEE,GAAG,CAACC,QAAJ,CAAaC;AAA9C,OAAD,CAAR;AACH;AACJ,GAXD,CA3C0B,CAuD1B;;;AACA,QAAMW,UAAU,GAAIT,OAAD,IAAa;AAC5BX,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAEjB,WAAP;AAAoBkB,MAAAA,OAAO,EAAEM;AAA7B,KAAD,CAAR;AACH,GAFD,CAxD0B,CA2D1B;;;AACA,QAAMU,YAAY,GAAIV,OAAD,IAAa;AAC9BX,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAEhB;AAAP,KAAD,CAAR;AACH,GAFD,CA5D0B,CAgE1B;;;AACA,QAAMkC,cAAc,GAAIC,IAAD,IAAU;AAC7BvB,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAEd,eAAP;AAAwBe,MAAAA,OAAO,EAAEkB;AAAjC,KAAD,CAAR;AACH,GAFD;;AAGA,QAAMC,aAAa,GAAG,MAAM;AACxBxB,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAErB;AAAP,KAAD,CAAR;AACH,GAFD,CApE0B,CAuE1B;;;AACA,QAAM0C,WAAW,GAAG,MAAM;AACtBzB,IAAAA,QAAQ,CAAC;AAACI,MAAAA,IAAI,EAAEf;AAAP,KAAD,CAAR;AACH,GAFD;;AAGA,SACI,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAI;AAC9BM,MAAAA,QAAQ,EAAEI,KAAK,CAACJ,QADc;AAE9BG,MAAAA,KAAK,EAAEC,KAAK,CAACD,KAFiB;AAG9BY,MAAAA,UAH8B;AAI9BI,MAAAA,aAJ8B;AAK9BlB,MAAAA,OAAO,EAAEG,KAAK,CAACH,OALe;AAM9BC,MAAAA,QAAQ,EAAEE,KAAK,CAACF,QANc;AAO9BuB,MAAAA,UAP8B;AAQ9BC,MAAAA,YAR8B;AAS9BJ,MAAAA,aAT8B;AAU9BK,MAAAA,cAV8B;AAW9BG,MAAAA,WAX8B;AAY9BxB,MAAAA,WAZ8B;AAa9BuB,MAAAA;AAb8B,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeM/B,KAAK,CAACiC,QAfZ,CADJ;AAmBH,CA9FD;;AAgGA,eAAelC,YAAf","sourcesContent":["import React ,{ useReducer } from 'react'\nimport axios from 'axios'\nimport contactReducer from './contactReducer'\nimport contactContext from './contactContext'\nimport {\n    GET_CONTACTS,\n    CLEAR_CONTACTS,\n    ADD_CONTACT,\n    DELETE_CONTACT,\n    UPDATE_CONTACT,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    CLEAR_FILTER,\n    FILTER_CONTACTS,\n    CONTACT_ERROR\n} from '../Types'\n\nconst ContactState = props => {\n    const initialState= {\n        contacts: null,\n        current: null,\n        filtered: null,\n        error: null\n    }\n\n    const [state, dispatch] = useReducer(contactReducer, initialState)\n\n    // Get Contacts\n    const getContacts = async () => {\n        try {\n            const res = await axios.get('/api/contacts')\n            dispatch({type: GET_CONTACTS, payload: res.data})\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR , payload: err.response.msg })\n        }       \n    }\n    // Add a contact\n    const addContact = async contact => {\n        const config = {\n            \"Content-Type\" : \"application/json\"\n        }\n\n        try {\n            const res = await axios.post('/api/contacts', contact, config)\n            dispatch({type: ADD_CONTACT, payload: res.data})\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR , payload: err.response.msg })\n        }\n        \n    }\n    // Delete a contact\n    const deleteContact = async (id) => {\n        try {\n            const res = await axios.delete(`/api/contacts/${id}`)\n            dispatch({type: DELETE_CONTACT, payload: id})\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR , payload: err.response.msg })\n        }\n    }\n    // Update contact\n    const updateContact = async (contact) => {\n        const config = {\n            \"Content-Type\" : \"application/json\"\n        }\n\n        try {\n            const res = await axios.put(`/api/contacts/${contact._id}`, contact, config)\n            dispatch({type: UPDATE_CONTACT, payload: res.data})\n        } catch (err) {\n            dispatch({ type: CONTACT_ERROR , payload: err.response.msg })\n        }\n    }\n    // Set current contact\n    const setCurrent = (contact) => {\n        dispatch({type: SET_CURRENT, payload: contact})\n    }\n    // Clear current contact\n    const clearCurrent = (contact) => {\n        dispatch({type: CLEAR_CURRENT})\n    }\n\n    // Filter contacts\n    const filterContacts = (text) => {\n        dispatch({type: FILTER_CONTACTS, payload: text})\n    }\n    const clearContacts = () => {\n        dispatch({type: CLEAR_CONTACTS})\n    }\n    // Clear filter\n    const clearFilter = () => {\n        dispatch({type: CLEAR_FILTER})\n    }\n    return (\n        <contactContext.Provider value = {{\n            contacts: state.contacts,\n            error: state.error,\n            addContact,\n            deleteContact,\n            current: state.current,\n            filtered: state.filtered,\n            setCurrent,\n            clearCurrent,\n            updateContact,\n            filterContacts,\n            clearFilter,\n            getContacts,\n            clearContacts\n        }}>\n            { props.children }\n        </contactContext.Provider>\n    )\n}\n\nexport default ContactState"]},"metadata":{},"sourceType":"module"}