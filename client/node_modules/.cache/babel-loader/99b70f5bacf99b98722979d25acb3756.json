{"ast":null,"code":"import React,{Fragment,useContext,useEffect}from'react';import{Link}from'react-router-dom';import AuthContext from'../../context/auth/authContext';import ContactContext from'../../context/contact/contactContext';var Navbar=function Navbar(_ref){var title=_ref.title,icon=_ref.icon;var authContext=useContext(AuthContext);var contactContext=useContext(ContactContext);var isAuthenticated=authContext.isAuthenticated,logout=authContext.logout,user=authContext.user,loadUser=authContext.loadUser;var clearContacts=contactContext.clearContacts;useEffect(function(){loadUser();//eslint-disable-next-line\n},[]);var onLogout=function onLogout(){logout();// When we logout and then try to login we see the previous user\n//contacts for a sec. To avoid this we clear the contacts after\n// logging out\nclearContacts();};var authLinks=React.createElement(Fragment,null,React.createElement(\"li\",null,\"Hello \",user&&user.name),React.createElement(\"li\",null,React.createElement(\"a\",{onClick:onLogout,href:\"#!\"},React.createElement(\"i\",{className:\"fas fa-sign-out-alt\"}),React.createElement(\"span\",{className:\"hide-sm\"},\"Logout\"))));var guestLinks=React.createElement(Fragment,null,React.createElement(\"li\",null,React.createElement(Link,{to:\"/register\"},\"Register\")),React.createElement(\"li\",null,React.createElement(Link,{to:\"/login\"},\"Login\")),React.createElement(\"li\",null,React.createElement(\"a\",{href:\"https://www.w3schools.com/html/html_links.asp\"},\"Job Search\")));return React.createElement(\"div\",{className:\"navbar bg-primary\"},React.createElement(\"h1\",null,React.createElement(\"i\",{className:\"fa fa-superpowers\"}),\" \",title),React.createElement(\"ul\",null,isAuthenticated?authLinks:guestLinks));};Navbar.defaultProps={title:'Linda.com',icon:'fa fa-superpowers'};export default Navbar;","map":{"version":3,"sources":["/home/king/Desktop/lindabirthday/client/src/components/layout/Navbar.js"],"names":["React","Fragment","useContext","useEffect","Link","AuthContext","ContactContext","Navbar","title","icon","authContext","contactContext","isAuthenticated","logout","user","loadUser","clearContacts","onLogout","authLinks","name","guestLinks","defaultProps"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,UAA1B,CAAsCC,SAAtC,KAAuD,OAAvD,CAEA,OAASC,IAAT,KAAqB,kBAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,gCAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,sCAA3B,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAqB,IAAlBC,CAAAA,KAAkB,MAAlBA,KAAkB,CAAXC,IAAW,MAAXA,IAAW,CAClC,GAAMC,CAAAA,WAAW,CAAGR,UAAU,CAACG,WAAD,CAA9B,CACA,GAAMM,CAAAA,cAAc,CAAGT,UAAU,CAACI,cAAD,CAAjC,CAFkC,GAG1BM,CAAAA,eAH0B,CAGkBF,WAHlB,CAG1BE,eAH0B,CAGTC,MAHS,CAGkBH,WAHlB,CAGTG,MAHS,CAGDC,IAHC,CAGkBJ,WAHlB,CAGDI,IAHC,CAGKC,QAHL,CAGkBL,WAHlB,CAGKK,QAHL,IAI1BC,CAAAA,aAJ0B,CAIRL,cAJQ,CAI1BK,aAJ0B,CAMlCb,SAAS,CAAC,UAAM,CACdY,QAAQ,GACR;AACD,CAHQ,CAGN,EAHM,CAAT,CAIA,GAAME,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrBJ,MAAM,GACN;AACA;AACA;AACAG,aAAa,GACd,CAND,CAQA,GAAME,CAAAA,SAAS,CACb,oBAAC,QAAD,MACE,uCAAWJ,IAAI,EAAIA,IAAI,CAACK,IAAxB,CADF,CAEE,8BACE,yBAAG,OAAO,CAAEF,QAAZ,CAAsB,IAAI,CAAC,IAA3B,EACE,yBAAG,SAAS,CAAC,qBAAb,EADF,CAEE,4BAAM,SAAS,CAAC,SAAhB,WAFF,CADF,CAFF,CADF,CAYA,GAAMG,CAAAA,UAAU,CACd,oBAAC,QAAD,MACE,8BACE,oBAAC,IAAD,EAAM,EAAE,CAAC,WAAT,aADF,CADF,CAIE,8BACE,oBAAC,IAAD,EAAM,EAAE,CAAC,QAAT,UADF,CAJF,CAOE,8BACE,yBAAG,IAAI,CAAC,+CAAR,eADF,CAPF,CADF,CAcA,MACE,4BAAK,SAAS,CAAC,mBAAf,EACE,8BACE,yBAAG,SAAS,CAAC,mBAAb,EADF,KACuCZ,KADvC,CADF,CAIE,8BAAKI,eAAe,CAAGM,SAAH,CAAeE,UAAnC,CAJF,CADF,CAQD,CApDD,CA2DAb,MAAM,CAACc,YAAP,CAAsB,CACpBb,KAAK,CAAE,WADa,CAEpBC,IAAI,CAAE,mBAFc,CAAtB,CAKA,cAAeF,CAAAA,MAAf","sourcesContent":["import React, { Fragment, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport AuthContext from '../../context/auth/authContext';\nimport ContactContext from '../../context/contact/contactContext';\n\nconst Navbar = ({ title, icon }) => {\n  const authContext = useContext(AuthContext);\n  const contactContext = useContext(ContactContext);\n  const { isAuthenticated, logout, user, loadUser } = authContext;\n  const { clearContacts } = contactContext;\n\n  useEffect(() => {\n    loadUser();\n    //eslint-disable-next-line\n  }, []);\n  const onLogout = () => {\n    logout();\n    // When we logout and then try to login we see the previous user\n    //contacts for a sec. To avoid this we clear the contacts after\n    // logging out\n    clearContacts();\n  };\n\n  const authLinks = (\n    <Fragment>\n      <li>Hello {user && user.name}</li>\n      <li>\n        <a onClick={onLogout} href='#!'>\n          <i className='fas fa-sign-out-alt'></i>\n          <span className='hide-sm'>Logout</span>\n        </a>\n      </li>\n    </Fragment>\n  );\n\n  const guestLinks = (\n    <Fragment>\n      <li>\n        <Link to='/register'>Register</Link>\n      </li>\n      <li>\n        <Link to='/login'>Login</Link>\n      </li>\n      <li>\n        <a href='https://www.w3schools.com/html/html_links.asp'>Job Search</a>\n      </li>\n    </Fragment>\n  );\n\n  return (\n    <div className='navbar bg-primary'>\n      <h1>\n        <i className='fa fa-superpowers' /> {title}\n      </h1>\n      <ul>{isAuthenticated ? authLinks : guestLinks}</ul>\n    </div>\n  );\n};\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  icon: PropTypes.string,\n};\n\nNavbar.defaultProps = {\n  title: 'Linda.com',\n  icon: 'fa fa-superpowers',\n};\n\nexport default Navbar;\n"]},"metadata":{},"sourceType":"module"}