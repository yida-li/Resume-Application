{"ast":null,"code":"var _jsxFileName = \"/home/king/Desktop/ContactKeeperV2/client/src/context/contact/ContactState.js\";\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport contactReducer from './contactReducer';\nimport contactContext from './contactContext';\nimport { GET_CONTACTS, CLEAR_CONTACTS, ADD_CONTACT, DELETE_CONTACT, UPDATE_CONTACT, SET_CURRENT, CLEAR_CURRENT, CLEAR_FILTER, FILTER_CONTACTS, CONTACT_ERROR } from '../Types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add a contact\n\n\n  const addContact = async contact => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete a contact\n\n\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update contact\n\n\n  const updateContact = async contact => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Set current contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear current contact\n\n\n  const clearCurrent = contact => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  };\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Clear filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return React.createElement(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      error: state.error,\n      addContact,\n      deleteContact,\n      current: state.current,\n      filtered: state.filtered,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      getContacts,\n      clearContacts\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, props.children);\n};\n\nexport default ContactState;","map":{"version":3,"sources":["/home/king/Desktop/ContactKeeperV2/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","contactReducer","contactContext","GET_CONTACTS","CLEAR_CONTACTS","ADD_CONTACT","DELETE_CONTACT","UPDATE_CONTACT","SET_CURRENT","CLEAR_CURRENT","CLEAR_FILTER","FILTER_CONTACTS","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","post","deleteContact","id","delete","updateContact","put","_id","setCurrent","clearCurrent","filterContacts","text","clearContacts","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport contactReducer from './contactReducer';\nimport contactContext from './contactContext';\nimport {\n  GET_CONTACTS,\n  CLEAR_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  UPDATE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  CLEAR_FILTER,\n  FILTER_CONTACTS,\n  CONTACT_ERROR\n} from '../Types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: null,\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // Get Contacts\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({ type: GET_CONTACTS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n  // Add a contact\n  const addContact = async contact => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({ type: ADD_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n  // Delete a contact\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({ type: DELETE_CONTACT, payload: id });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n  // Update contact\n  const updateContact = async contact => {\n    const config = {\n      'Content-Type': 'application/json'\n    };\n\n    try {\n      const res = await axios.put(\n        `/api/contacts/${contact._id}`,\n        contact,\n        config\n      );\n      dispatch({ type: UPDATE_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  };\n  // Set current contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  };\n  // Clear current contact\n  const clearCurrent = contact => {\n    dispatch({ type: CLEAR_CURRENT });\n  };\n\n  // Filter contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  };\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS });\n  };\n  // Clear filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER });\n  };\n  return (\n    <contactContext.Provider\n      value={{\n        contacts: state.contacts,\n        error: state.error,\n        addContact,\n        deleteContact,\n        current: state.current,\n        filtered: state.filtered,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        getContacts,\n        clearContacts\n      }}\n    >\n      {props.children}\n    </contactContext.Provider>\n  );\n};\n\nexport default ContactState;\n"]},"metadata":{},"sourceType":"module"}